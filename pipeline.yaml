trigger:
  - master
  - develop
pr:
  - master
  - develop

parameters:
  containerServiceEndpoint: ''
  registry: ''
  project: ''
  helmChartLocation: ''
  latestName: ''
  majorVersion: 0
  stateCode: 0


jobs:
  - job: Linux
  pool:
    vmImage: 'Ubuntu-16.04'
  variables:
    version: 0.0.0
    semVersion: 0.0.0
  steps:
    - powershell: |
      Write-Host "##vso[task.setvariable variable=version]${{ parameters.state_code }}.${{ parameters.majorVersion }}.$([math]::floor($(build.buildId)/10000)).$($(build.buildId)%10000)"
      Write-Host "##vso[task.setvariable variable=semVersion]${{ parameters.majorVersion }}.$([math]::floor($(build.buildId)/10000)).$($(build.buildId)%10000)"
      Write-Host "Version = $(version)"
    displayName: Set Version Variable
    - template: build-pipeline.yaml
    parameters:
      name: 'Linux'
      vmImage: 'Ubuntu-16.04'
      version: '$(version)'
      semVersion: '$(semVersion)'
      containerServiceEndpoint: '${{ parameters.containerServiceEndpoint }}'
      registry: '${{ parameters.registry }}'
      project: '${{ parameters.project }}'
      helmChartLocation: '${{ parameters.helmChartLocation }}'
      latestName: '$(registry)/$(project):latest'
      imageName: '$(registry)/$(project):$(version)'


steps:
  
  - task: Docker@1
    displayName: Container registry login
    inputs:
      azureSubscriptionEndpoint: $(containerServiceEndpoint)
      azureContainerRegistry: $(registry)
      command: login
  - task: Docker@1
    displayName: Build image
    inputs:
      command: build
      azureSubscriptionEndpoint: $(containerServiceEndpoint)
      azureContainerRegistry: $(registry)
      dockerFile: application/Dockerfile
      imageName: $(project)
      arguments: ${{ format('--build-arg version=$(version)') }}
  - task: Docker@1
    displayName: Tag image
    inputs:
      command: tag
      azureSubscriptionEndpoint: $(containerServiceEndpoint)
      azureContainerRegistry: $(registry)
      imageName: $(latestName)
      arguments: $(imageName)
  - task: Docker@1
    displayName: Push version image
    inputs:
      command: push
      azureSubscriptionEndpoint: $(containerServiceEndpoint)
      azureContainerRegistry: $(registry)
      imagename: $(imageName)
  - task: Docker@1
    displayName: Push latest image
    inputs:
      command: push
      azureSubscriptionEndpoint: $(containerServiceEndpoint)
      azureContainerRegistry: $(registry)
      imagename: $(latestName)
  - task: AzureCLI@1
    displayName: package helm chart
    inputs:
      azureSubscription : $(containerServiceEndpoint)
      scriptLocation: inlineScript
      inlineScript: |
        echo "Setting version to $(semVersion)"
        sed -i 's/0\.0\.0-INTERNAL/$(semVersion)/g' application/helm/claimantportal-web/Chart.yaml
        # The values contains the version of the docker image, which is the full version
        sed -i 's/0\.0\.0-INTERNAL/$(version)/g' application/helm/claimantportal-web/values.yaml
        cat application/helm/claimantportal-web/Chart.yaml
        cat application/helm/claimantportal-web/values.yaml
        helm package application/helm/claimantportal-web --save=false
        az acr helm push -n iusdev claimantportal-web-$(semVersion).tgz

    