parameters:
  version: ''
  semVersion: ''
  containerServiceEndpoint: ''
  registry: ''
  project: ''
  helmChartLocation: ''
  helmChartName : ''
  latestName: ''
  imageName: ''

steps:
  - task: Docker@1
    displayName: Container registry login
    inputs:
      azureSubscriptionEndpoint: ${{ parameters.containerServiceEndpoint }}
      azureContainerRegistry: ${{ parameters.registry }}
      command: login
  - task: Docker@1
    displayName: Build image
    inputs:
      command: build
      azureSubscriptionEndpoint: ${{ parameters.containerServiceEndpoint }}
      azureContainerRegistry: ${{ parameters.registry }}
      dockerFile: application/Dockerfile
      imageName: ${{ parameters.project }}
      arguments: --build-arg version=${{ parameters.version}}
      addDefaultLabels: false
  - task: Docker@1
    displayName: Tag image
    inputs:
      command: tag
      azureSubscriptionEndpoint: ${{ parameters.containerServiceEndpoint }}
      azureContainerRegistry: ${{ parameters.registry }}
      imageName: ${{ parameters.latestName }}
      arguments: ${{ parameters.imageName }}
  - task: AzureCLI@1
    displayName: Running Health Check
    inputs:
      azureSubscription : ${{ parameters.containerServiceEndpoint }}
      scriptLocation: inlineScript
      inlineScript: |
        echo 'Creating Appsettings folder at $(Build.ArtifactStagingDirectory)'
        mkdir $(Build.ArtifactStagingDirectory)/appsettings
        echo '{ "AppSettings" : { "URLs" : { "IdentityServer" : "https://iusidentityservier.azurewebsites.net" } } }' > $(Build.ArtifactStagingDirectory)/appsettings/appsettings.Consortium.Production.json
        echo 'Starting Docker Image ${{ parameters.latestName }}'
        docker run -d -e "APPSETTING_LOCATION=/data/appsettings" -v $(Build.ArtifactStagingDirectory)/appsettings:/data/appsettings  -p 80:80 ${{ parameters.latestName }}
        sleep 5
        docker ps -a
        docker logs $(docker ps | grep "${{ parameters.latestName }}" | awk '{print $1}')
        echo 'Testing Health'
        curl http://localhost/health
  - task: Docker@1
    displayName: Push version image
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    inputs:
      command: push
      azureSubscriptionEndpoint: ${{ parameters.containerServiceEndpoint }}
      azureContainerRegistry: ${{ parameters.registry }}
      imagename: ${{ parameters.imageName }}
  - task: Docker@1
    displayName: Push latest image
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    inputs:
      command: push
      azureSubscriptionEndpoint: ${{ parameters.containerServiceEndpoint }}
      azureContainerRegistry: ${{ parameters.registry }}
      imagename: ${{ parameters.latestName }}
  - task: AzureCLI@1
    displayName: package helm chart
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    inputs:
      azureSubscription : ${{ parameters.containerServiceEndpoint }}
      scriptLocation: inlineScript
      inlineScript: |
        echo "Setting version to ${{ parameters.semVersion }}"
        sed -i 's/0\.0\.0-INTERNAL/${{ parameters.semVersion }}/g' ${{ parameters.helmChartLocation }}/${{ parameters.helmChartName }}/Chart.yaml
        # The values contains the version of the docker image, which is the full version
        sed -i 's/0\.0\.0-INTERNAL/${{ parameters.version }}/g' ${{ parameters.helmChartLocation }}/${{ parameters.helmChartName }}/values.yaml
        cat ${{ parameters.helmChartLocation }}/${{ parameters.helmChartName }}/Chart.yaml
        cat ${{ parameters.helmChartLocation }}/${{ parameters.helmChartName }}/values.yaml
        helm package ${{ parameters.helmChartLocation }}/${{ parameters.helmChartName }} --save=false
        az acr helm push -n iusdev ${{ parameters.helmChartName }}-${{ parameters.semVersion }}.tgz

    