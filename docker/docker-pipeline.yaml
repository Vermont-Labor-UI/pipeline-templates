parameters:
  autorestClientFeed: ''
  autorestProjectName: ''
  autorestTemplateType: 'Service'
  version: ''
  semVersion: ''
  containerServiceEndpoint: ''
  registry: ''
  project: ''
  helmChartLocation: ''
  helmChartName : ''
  latestName: ''
  imageName: ''

steps:
  - task: AzureCLI@1
    displayName: Create Helm Chart
    inputs:
      azureSubscription : ${{ parameters.containerServiceEndpoint }}
      scriptLocation: inlineScript
      inlineScript: |
        wget ftp://iusproget.westus.cloudapp.azure.com/helm-templates.tar.gz
        ls -lah
        echo "Extracting files: to $(Build.ArtifactStagingDirectory)/${{ parameters.helmChartName}}/"
        mkdir -p $(Build.ArtifactStagingDirectory)/${{ parameters.helmChartName}}/
        tar xvzf helm-templates.tar.gz -C $(Build.ArtifactStagingDirectory)/${{ parameters.helmChartName}}/
        ls -lah $(Build.ArtifactStagingDirectory)/${{ parameters.helmChartName}}/
        sudo npm install -g mustache
        echo '{ "imageName" : "${{ parameters.project }}" }' | mustache - $(Build.ArtifactStagingDirectory)/${{ parameters.helmChartName }}/values.yaml
        echo '{ "helmName" : "${{ parameters.helmChartName }}" }' | mustache - $(Build.ArtifactStagingDirectory)/${{ parameters.helmChartName }}/Chart.yaml
  - task: Docker@1
    displayName: Container registry login
    inputs:
      azureSubscriptionEndpoint: ${{ parameters.containerServiceEndpoint }}
      azureContainerRegistry: ${{ parameters.registry }}
      command: login
  - task: Docker@1
    displayName: Build image
    inputs:
      command: build
      azureSubscriptionEndpoint: ${{ parameters.containerServiceEndpoint }}
      azureContainerRegistry: ${{ parameters.registry }}
      dockerFile: application/Dockerfile
      imageName: ${{ parameters.project }}
      arguments: --build-arg version=${{ parameters.version}}
      addDefaultLabels: false
  - task: Docker@1
    displayName: Tag image
    inputs:
      command: tag
      azureSubscriptionEndpoint: ${{ parameters.containerServiceEndpoint }}
      azureContainerRegistry: ${{ parameters.registry }}
      imageName: ${{ parameters.latestName }}
      arguments: ${{ parameters.imageName }}
  - task: AzureCLI@1
    displayName: Launching docker image
    inputs:
      azureSubscription : ${{ parameters.containerServiceEndpoint }}
      scriptLocation: inlineScript
      inlineScript: |
        echo 'Creating Appsettings folder at $(Build.ArtifactStagingDirectory)'
        mkdir $(Build.ArtifactStagingDirectory)/appsettings
        echo '{
          "AppSettings" : {
             "URLs" : {
               "IdentityServer" : "https://iusidentityserver.azurewebsites.net"
             }
          },
          "Data": {
            "Queue": {
              "Password": "$(QueuePassword)",
              "Port": "5672",
              "ServerName": "$(QueueUrl)",
              "Threads": {
                "Global": 0
              },
              "UserName": "$(QueueUserName)",
              "VirtualHost": "BuildServer"
            },
            "Identity": {
               "ApiScope": "api1"
             }
          },
          "DoNotRequireHttps": true,
          "Serilog":{
            "MinimumLevel": "Information",
             "Using": [
                 "Serilog.Sinks.Console"
             ],
             "WriteTo": [
                 {
                     "Name": "Console"
                 }
             ]
          }
         }' > $(Build.ArtifactStagingDirectory)/appsettings/appsettings.Consortium.Production.json
        echo 'Using AppSettings'
        cat $(Build.ArtifactStagingDirectory)/appsettings/appsettings.Consortium.Production.json
        echo 'Starting Docker Image ${{ parameters.latestName }}'
        docker run -d -e "APPSETTING_LOCATION=/data/appsettings" -e "BuildServer=true" -v $(Build.ArtifactStagingDirectory)/appsettings:/data/appsettings --net=host -p 80:80 ${{ parameters.imageName }}
        sleep 5
        docker ps -a
        latest_guid="$(docker ps -a | grep "${{ parameters.imageName }}" | awk '{print $1}')"
        echo "Checking logs for $latest_guid"
        docker logs $latest_guid
  - task: AzureCLI@1
    displayName: Running Health Check
    inputs:
      azureSubscription : ${{ parameters.containerServiceEndpoint }}
      scriptLocation: inlineScript
      inlineScript: |
        echo 'Testing Health'
        curl http://localhost/health -o health.json
        echo 'health result:'
        python -m json.tool health.json
        healthexitcode=$?
        docker ps -a
        latest_guid="$(docker ps -a | grep "${{ parameters.imageName }}" | awk '{print $1}')"
        echo "Checking logs for $latest_guid"
        docker logs $latest_guid
        if [ $healthexitcode != 0 ]; then
          exit $healthexitcode
        fi
  - ${{ if ne(parameters.autorestProjectName, '') }}:
    - task: AzureCLI@1
      displayName: Building Autorest Client
      condition: succeeded()
      inputs:
        azureSubscription : ${{ parameters.containerServiceEndpoint }}
        scriptLocation: inlineScript
        inlineScript: |
          mkdir $(Build.ArtifactStagingDirectory)/autorest
          docker run --net=host --mount type=bind,src=$(Build.ArtifactStagingDirectory)/autorest,dst=/autorest/dist iusdev.azurecr.io/autorest-auto-generator:latest python3 main.py --projectName ${{ parameters.autorestProjectName }} --templateType ${{ parameters.autorestTemplateType }}
          dockerexitcode=$?
          ls -al $(Build.ArtifactStagingDirectory)/autorest
          if [ $dockerexitcode != 0 ]; then
            exit $dockerexitcode
          fi
    - task: NuGetCommand@2
      displayName: 'Autorest client NuGet push'
      condition:
        and
        (
          succeeded(),
          or
          (
            eq(variables['Build.SourceBranch'], 'refs/heads/master'),
            and
            (
              eq(variables['UsingDevelopBranch'], 'true'),
              eq(variables['Build.SourceBranch'], 'refs/heads/develop')
            )
          )
        )
      inputs:
        command: push
        publishVstsFeed: '${{parameters.autorestClientFeed}}'
        allowPackageConflicts: false
        packagesToPush: '$(Build.ArtifactStagingDirectory)/autorest/*.nupkg'
  - task: Docker@1
    displayName: Push version image
    condition: |
      and
      (
        succeeded(),
        or
        (
          eq(variables['Build.SourceBranch'], 'refs/heads/master'),
          and
          (
            eq(variables['UsingDevelopBranch'], 'true'),
            eq(variables['Build.SourceBranch'], 'refs/heads/develop')
          )
        )
      )
    inputs:
      command: push
      azureSubscriptionEndpoint: ${{ parameters.containerServiceEndpoint }}
      azureContainerRegistry: ${{ parameters.registry }}
      imagename: ${{ parameters.imageName }}
  - task: Docker@1
    displayName: Push latest image
    condition: |
      and
      (
        succeeded(),
        or
        (
          eq(variables['Build.SourceBranch'], 'refs/heads/master'),
          and
          (
            eq(variables['UsingDevelopBranch'], 'true'),
            eq(variables['Build.SourceBranch'], 'refs/heads/develop')
          )
        )
      )
    inputs:
      command: push
      azureSubscriptionEndpoint: ${{ parameters.containerServiceEndpoint }}
      azureContainerRegistry: ${{ parameters.registry }}
      imagename: ${{ parameters.latestName }}
  - template: ../helm/helm-chart-pipeline-template.yaml
    parameters:
      version: '${{ parameters.version }}'
      semVersion: '${{ parameters.semVersion }}'
      containerServiceEndpoint: '${{ parameters.containerServiceEndpoint }}'
      helmChartLocation: '${{ parameters.helmChartLocation }}'
      helmChartName : '${{ parameters.helmChartName }}'
