parameters:
  Name : 'DotNet_ServiceBuild'
  Project : ''
  serviceProject: ''
  nugetConfigPath : 'application/NuGet.Config'
  majorVersion: 0
  stateCode: 0

jobs:
  - job: ${{ parameters.Name }}
    variables:
      version: ${{ parameters.stateCode }}.${{ parameters.majorVersion }}.$([math]::floor($(build.buildId)/10000)).$($(build.buildId)%10000)
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
      - script: |
          echo "Setting csproj Version To $version"
          find application/ -type f -iname '*.csproj' -exec  sed -i "s/0\.0\.0\-INTERNAL/$version/g" "{}" \;
          grep "<VersionPrefix>.*</VersionPrefix>" -R .
        displayName: Set Project Version
      - task: DotNetCoreCLI@2
        displayName: Restore
        inputs:
          command: restore
          projects: 'application/**/*.csproj'
          feedsToUse: config
          nugetConfigPath: ${{ parameters.nugetConfigPath }}
      - script: dotnet build ${{ parameters.Project }}${{ parameters.serviceProject }} --configuration Release
        displayName: Build
      - task: DotNetCoreCLI@2
        displayName: Run Tests
        inputs:
          command: test
          projects: '**/*Tests/*.csproj'
          arguments: '--configuration Release'
      - script: dotnet publish ${{ parameters.Project }}${{ parameters.serviceProject }} --configuration Release --output  -o $(Build.ArtifactStagingDirectory)/Service
        displayName: Publish
      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: $(Build.ArtifactStagingDirectory)/Service
          archiveFile: $(Build.ArtifactStagingDirectory)/Service.zip
          quiet: false
          includeRootFolder: false
      - task: PublishBuildArtifacts@1
        inputs:
          pathtoPublish : '$(Build.ArtifactStagingDirectory)/Service.zip'
          artifactName: artifacts
